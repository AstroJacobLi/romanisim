#!/usr/bin/env python

import sys
import argparse
import datetime
import logging
import csv
from copy import deepcopy
import asdf
from astropy.coordinates import SkyCoord
from astropy import units as u
from astropy.table import Table
from astropy.io import fits
from astropy.time import Time
import galsim
from romanisim import catalog, image, wcs, persistence
from romanisim.parameters import default_parameters_dictionary
from romanisim import log
from romanisim import parameters

NUMBER_OF_DETECTORS = 18

def main():
    parser = argparse.ArgumentParser(
        description='Make a stack of demo images.',
        epilog='EXAMPLE: %(prog)s mosaic_list.csv',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    # Command line Argument
    parser.add_argument('input_file_name',
                        type=str,
                        metavar='mosaic_list.csv',
                        # nargs=1,
                        help=f'Input (csv) file containing lists of observation parameters:'
                             f'ra, dec, roll_angle, optical_element, date, overhead_time, ms_table_number')

    # Boresight
    parser.add_argument('-b', '--boresight',
                        action='store_true',
                        default=False,
                        help=('RA & Dec specifies location of boresight, not center of WFI.'))

    # WCS Object Catalog
    parser.add_argument('-c', '--catalog',
                        type=str,
                        metavar='object_table.csv',
                        default=None,
                        help='Object catalog file for wcs matching (csv)')

    # Debug argument
    parser.add_argument('-d', "--debug",
                        action='store_true',
                        help='Display verbose debug output')

    # Level argument
    parser.add_argument('-l', '--level',
                        type=int,
                        default=1,
                        help='1 or 2, for L1 or L2 output')

    # Create script making argument
    parser.add_argument('-m', "--make_script",
                        action='store_true',
                        help='Create list of romanisim calls from csv file (e.g. for cluster usage).')

    # Number of objects to simulate
    parser.add_argument('-n', '--nobj',
                        type=int,
                        default=1000,
                        help='Specify number of objects to simulate.')

    # Persistence
    parser.add_argument('-p', '--previous',
                        type=str,
                        metavar='previous.asdf',
                        nargs=1,
                        help=(
                            'Previous simulated file in chronological order used for persistence modeling.'))

    # Random number seed
    parser.add_argument('-r', '--rng_seed',
                        type=int,
                        default=None,
                        help='Random number seed (int)')

    # SCA detector identifier number
    parser.add_argument('-s','--sca',
                        type=int,
                        default=0,
                        help='SCA to simulate')

    # Use CRDS for distortion maps
    parser.add_argument('-u', '--usecrds',
                        action='store_true',
                        help='Use CRDS for distortion map')

    # Use CRDS stored PSFs
    parser.add_argument('-w', '--webbpsf',
                        action='store_true',
                        help='Use webbpsf for PSFs.')




    args = parser.parse_args()

    log.info('Starting simulation...')
    log.warning("romanisim is under active development.  Its output has "
                "not been formally validated; only limited testing has been "
                "performed.  For this reason, use of romanisim for "
                "preparation of ROSES proposals is not advised.  Other "
                "packages like galsim's roman package or STIPS may better "
                "serve such purposes.")

    # Set up metadata
    metadata = deepcopy(default_parameters_dictionary)

    # If creating a script, create the script file
    if args.make_script:
        spcript_file = open("romansim_stack.script", "w")

        # Acquire cleaned options to pass to script call
        options_dct = {}
        for option, value in vars(args).items():
            if args.debug:
                print(f'option, value = {option, value}')
            if option not in ('input_file_name','debug','make_script') and value is not None:
                options_dct[option] = value



    with open(args.input_file_name, newline='') as infile:
        reader = csv.DictReader(infile, delimiter=',', skipinitialspace=True)
        for entry in reader:
            # Debug: print keys
            if args.debug:
                print(f'entry.keys = {entry.keys()}')

            # Reset time offset
            time_offset = 0 * u.s

            # RA & Dec
            coord = SkyCoord(ra=float(entry['ra']) * u.deg, dec=float(entry['dec']) * u.deg,
                             frame='icrs')
            wcs.fill_in_parameters(metadata, coord, boresight=args.boresight, roll_ref=float(entry['roll_angle']))

            # Observational metadata
            metadata['instrument']['optical_element'] = entry['optical_element']
            metadata['exposure']['ma_table_number'] = int(entry['ma_table_number'])
            ma_table = parameters.ma_table[ metadata['exposure']['ma_table_number']]




            # Loop over number of exposures
            for entry_idx in range(int(entry['exposures'])):
                # Set initial (possibly only) SCA
                sca = args.sca if (args.sca > 0) else 1

                # Date
                date = Time(entry['date'], format='isot') + time_offset
                metadata['exposure']['start_time'] = date

                # If SCA value is within 1-18, only run once
                # otherwise loop over all detectors
                while (sca <= NUMBER_OF_DETECTORS):
                    # Detector
                    metadata['instrument']['detector'] = f'WFI{sca:02d}'

                    # Create output file name
                    output_file_name = f"roman_simulated_{entry['ra']}_{entry['dec']}_{date}_{entry['optical_element']}_{entry_idx + 1}_{sca}.asdf"

                    if args.debug:
                        print(f"output_file_name = {output_file_name}")

                    # If making a script, write the line and proceed
                    # otherwise create simulation file
                    if args.make_script:
                        line = f"romanisim-make-image {output_file_name}"

                        for option, value in options_dct.items():
                            if (type(value) != bool) and (option != 'sca'):
                                line += f" --{option} {value}"
                            elif (option == 'sca'):
                                line += f" --{option} {sca}"
                            elif (value == True):
                                line += f" --{option}"

                        line += f" --bandpass {entry['optical_element']}"
                        line += f" --radec {entry['ra']} {entry['dec']}"
                        line += f" --ma_table_number {entry['ma_table_number']}"
                        line += f" --date "
                        for s in date.strftime('%Y %m %d %H %M %S %f').split(' '):
                            line += f"{int(s)} "

                        # print line
                        if args.debug:
                            print(f'line = {line}')

                        # add line to script
                        spcript_file.write(line+'\n')

                    else:
                        # Obtain WCS catalog
                        if args.catalog is None:
                            twcs = wcs.get_wcs(metadata, usecrds=args.usecrds)
                            rd_sca = twcs.toWorld(galsim.PositionD(
                                galsim.roman.n_pix / 2, galsim.roman.n_pix / 2))
                            cat = catalog.make_dummy_table_catalog(
                                rd_sca, bandpasses=[entry['optical_element']], nobj=args.nobj)
                        else:
                            log.warning('Catalog input will probably not work unless the catalog '
                                        'covers a lot of area or you have thought carefully about '
                                        'the relation between the boresight and the SCA locations.')
                            cat = Table.read(args.catalog)

                        # If selected, apply persistence
                        if args.previous:
                            # Use provided Persistence file for first SCA (for each entry) only
                            # after that, use previously created file
                            if args.sca > 0 and sca > 1:
                                persist = persistence.Persistence.read(previous_file_name)
                            else:
                                persist = persistence.Persistence.read(args.previous)

                            previous_file_name = output_file_name
                        else:
                            persist = persistence.Persistence()

                        rng = galsim.UniformDeviate(args.rng_seed)

                        im, simcatobj = image.simulate(
                            metadata, cat, usecrds=args.usecrds,
                            webbpsf=args.webbpsf, level=args.level, persistence=persist,
                            rng=rng)

                        # Populate romanisim parameters and simulated object catalog
                        romanisimdict = vars(args)
                        romanisimdict['simcatobj'] = simcatobj

                        # Write output asdf file with simulated data
                        af = asdf.AsdfFile()
                        af.tree = {'roman': im, 'romanisim': romanisimdict}
                        af.write_to(output_file_name)


                    # Break the loop if only one detector specified
                    if args.sca > 0:
                        break
                    else:
                        sca += 1

                # Calculate time offset for the next exposure
                openshuttertime = parameters.read_time * (
                        ma_table[-1][0] + ma_table[-1][1] - 1)
                time_offset += (openshuttertime + (float(entry['overhead_time']))) * u.s


    # Close script file if appropriate
    if args.make_script:
        # add line to script
        spcript_file.close()


# Call main if run (as opposed to imported as a module)
if __name__ == "__main__":
    main()
